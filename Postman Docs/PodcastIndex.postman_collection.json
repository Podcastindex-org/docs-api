{
	"info": {
		"_postman_id": "2b24a533-e8b5-4ae0-973c-94c55ec56a81",
		"name": "PodcastIndex",
		"description": "Download the openapi spec in [json](pi_api.json) or [yaml](pi_api.yaml) format.\n# Overview\nThe Podcast Index (Podcast Index LLC) is a software developer focused partnership that provides tools and data to anyone who aspires to create new and exciting Podcast experiences without the heavy lifting of indexing, aggregation and data management.\n# Example Code\nUsers have provided example code for working the API in the following languages:\n\n  - [AWS Lambda - python](https://github.com/tbowers/python-podcastindex-org-lambda)\n  - [Bash](https://github.com/suorcd/Bash-podcastindex-org-example)\n  - [C#](https://github.com/ComicStrip/csharp-podcastindex-org-example)\n  - [Elisp](https://github.com/sabexx/elisp-example)\n  - [Flutter/Dart](https://github.com/crediblecreative/flutter-dart-podcastindex-org-example)\n  - [Go](https://github.com/ComicStrip/Go-podcastindex-org-example)\n  - [Go](https://github.com/kilobit/podcast-index-client)\n  - [Java](https://github.com/ComicStrip/Java-podcastindex-org-example)\n  - [Java](https://github.com/stucoates/PodcastIndexJavaClient)\n  - [Node.js](https://github.com/ComicStrip/node.js-podcastindex-org-example)\n  - [PHP](https://github.com/Podcastindex-org/example-code)\n  - [Python](https://github.com/tbowers/python-podcastindex-org-example)\n  - [Swift](https://github.com/ComicStrip/Swift-podcastindex-org-example)\n  - ... [More](https://github.com/Podcastindex-org-Examples)\n\nDon't see your desired language, create an example repo and create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to your example code project!\n# Libraries\nUser created libraries for working with the API:\n\n  - Node.js/npm/yarn\n      - [podcast-index-api](https://www.npmjs.com/package/podcast-index-api)\n      - [podcastdx-client](https://www.npmjs.com/package/podcastdx-client)\n  - Python/pip\n      - [python-podcastindex](https://pypi.org/project/python-podcastindex/)\n\nAre we missing a library? Did you create one for a different language? Create a [Pull Request](https://github.com/Podcastindex-org/docs-api/pulls) with a link to the new library!\n# Postman\nA collection file for use in the [Postman](https://www.postman.com/) application is available for this API.\n\n  1. Download the contents of the [Postman Docs](https://github.com/Podcastindex-org/docs-api/tree/master/Postman%20Docs) folder.\n  2. Import the `PodcastIndex.postman_collection.json` collection to Postman\n  3. Import the `PodcastIndexOrgEnvironment.postman_environment.json` to Postman\n  4. Set the `AuthKey` environment variable\n  5. Set the `SecretKey` environment variable\n  6. Hit the Send button (⌘ + return)\n\n# Contributing\nThe source for this API documentation is available at [https://github.com/Podcastindex-org/docs-api](https://github.com/Podcastindex-org/docs-api). Submit an Issue or create a Pull Request.\n# Authentication Details\nSending an API request is easy. We use an Amazon-style request authorization token to secure each request.\n\nRegister for a free API key at https://api.podcastindex.org/\n\nThese headers parameters are required for each request: `User-Agent`, `X-Auth-Date`, `X-Auth-Key`, `Authorization`\n\nSee [Authentication](#auth) for description of parameters.\n\n\nContact Support:\n Email: info@podcastindex.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "search",
			"item": [
				{
					"name": "Search Podcasts",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/byterm?q=batman university",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"byterm"
							],
							"query": [
								{
									"key": "q",
									"value": "batman university",
									"description": "(Required) Terms to search for\n"
								},
								{
									"key": "val",
									"value": "",
									"description": "Only returns feeds with a `value` block of the specified type. Use `any` to return feeds with any `value` block.\n",
									"disabled": true
								},
								{
									"key": "clean",
									"value": "false",
									"description": "If present, only non-explicit feeds will be returned. Meaning, feeds where the `itunes:explicit` flag is set to `false`.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all of the feeds that match the search terms in the `title`, `author` or `owner` of the feed.\n\nThis is ordered by the last-released episode, with the latest at the top of the results.\n\nExample: https://api.podcastindex.org/api/1.0/search/byterm?q=batman+university&pretty\n"
					},
					"response": []
				},
				{
					"name": "Search Podcasts by Title",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/bytitle?q=everything+everywhere+daily",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"bytitle"
							],
							"query": [
								{
									"key": "q",
									"value": "batman university",
									"description": "(Required) Terms to search for\n"
								},
								{
									"key": "val",
									"value": "",
									"description": "Only returns feeds with a `value` block of the specified type. Use `any` to return feeds with any `value` block.\n",
									"disabled": true
								},
								{
									"key": "clean",
									"value": "false",
									"description": "If present, only non-explicit feeds will be returned. Meaning, feeds where the `itunes:explicit` flag is set to `false`.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "similar",
									"value": "true",
									"description": "If present, include similar matches in search response\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all of the feeds where the `title` of the feed matches the search term (ignores case).\n\nExample \"everything everywhere daily\" will match the podcast [Everything Everywhere Daily](https://podcastindex.org/podcast/437685) by \"everything everywhere\" will not.\n\nExample: https://api.podcastindex.org/api/1.0/search/bytitle?q=everything+everywhere+daily&pretty\n"
					},
					"response": []
				},
				{
					"name": "Search Episodes by Person",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/search/byperson?q=adam curry",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"search",
								"byperson"
							],
							"query": [
								{
									"key": "q",
									"value": "adam curry",
									"description": "(Required) Person search for\n"
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all of the episodes where the specified person is mentioned.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=adam%20curry&pretty\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=Martin+Mouritzen&pretty\n  - https://api.podcastindex.org/api/1.0/search/byperson?q=Klaus+Schwab&pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "podcasts",
			"item": [
				{
					"name": "By Feed ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/byfeedid?id=75075",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"byfeedid"
							],
							"query": [
								{
									"key": "id",
									"value": "75075",
									"description": "(Required) The PodcastIndex Feed ID\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns everything we know about the feed from the PodcastIndex ID\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=75075&pretty\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byfeedid?id=169991&pretty\n  - Includes `value`: https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=4058673&pretty\n"
					},
					"response": []
				},
				{
					"name": "By Feed URL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"byfeedurl"
							],
							"query": [
								{
									"key": "url",
									"value": "https://feeds.theincomparable.com/batmanuniversity",
									"description": "(Required) Podcast feed URL\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns everything we know about the feed from the feed URL\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/podcasts/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity&pretty\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byfeedurl?url=https://engineered.network/pragmatic/feed/index.xml&pretty\n  - Includes `value`: https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://closing-the-loop.github.io/feed.xml&pretty\n"
					},
					"response": []
				},
				{
					"name": "By GUID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/byguid?guid=9b024349-ccf0-5f69-a609-6b82873eab3c",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"byguid"
							],
							"query": [
								{
									"key": "guid",
									"value": "9b024349-ccf0-5f69-a609-6b82873eab3c",
									"description": "(Required) The GUID from the `podcast:guid` tag in the feed. This value is a unique, global identifier for the podcast.\n\n\nSee the namespace spec for\n[guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns everything we know about the feed from the feed's GUID.\n\n\nThe GUID is a unique, global identifier for the podcast. See the namespace spec for\n[guid](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#guid) for details.\n\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/podcasts/byguid?guid=9b024349-ccf0-5f69-a609-6b82873eab3c&pretty\n  - Includes `value` and `funding`: https://api.podcastindex.org/api/1.0/podcasts/byguid?guid=9b024349-ccf0-5f69-a609-6b82873eab3c&pretty\n\n"
					},
					"response": []
				},
				{
					"name": "By iTunes ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/byitunesid?id=1441923632",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"byitunesid"
							],
							"query": [
								{
									"key": "id",
									"value": "1441923632",
									"description": "(Required) The iTunes Feed ID to search for\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns everything we know about the feed from the iTunes ID\n\nExample: https://api.podcastindex.org/api/1.0/podcasts/byitunesid?id=1441923632&pretty\n"
					},
					"response": []
				},
				{
					"name": "By Tag",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/bytag?podcast-value=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"bytag"
							],
							"query": [
								{
									"key": "podcast-value",
									"value": "true",
									"description": "(Required) Get feeds supporting the `value` tag.\n\nParameter shall not have a value\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all feeds that support the specified [podcast namespace](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md) tag.\n\nExample: https://api.podcastindex.org/api/1.0/podcasts/bytag?podcast-value&pretty\n"
					},
					"response": []
				},
				{
					"name": "Trending",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/trending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"trending"
							],
							"query": [
								{
									"key": "max",
									"value": "20",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "en",
									"description": "Specifying a language code (like \"en\") will return only episodes having that specific language.\n\nYou can specify multiple languages by separating them with commas.\n\nIf you also want to return episodes that have no language given, use the token \"unknown\". (ex. en,es,ja,unknown).\n\nValues are not case sensitive.\n",
									"disabled": true
								},
								{
									"key": "cat",
									"value": "News",
									"description": "Use this argument to specify that you **ONLY** want episodes with these categories in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "notcat",
									"value": "News",
									"description": "Use this argument to specify categories of episodes to **NOT** show in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns the podcasts/feeds that in the index that are trending.\n\nExample: https://api.podcastindex.org/api/1.0/podcasts/trending?pretty\n"
					},
					"response": []
				},
				{
					"name": "Dead",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/podcasts/dead",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"podcasts",
								"dead"
							],
							"query": [
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all feeds that have been marked dead (`dead` == 1)\n\nExample: https://api.podcastindex.org/api/1.0/podcasts/dead?pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "episodes",
			"item": [
				{
					"name": "By Feed ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/byfeedid?id=75075",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"byfeedid"
							],
							"query": [
								{
									"key": "id",
									"value": "75075",
									"description": "(Required) The PodcastIndex Feed ID or IDs to search for.\n\nIf searching for multiple IDs, separate values with a comma. A maximum of 200 IDs can be provided.\n"
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "max",
									"value": "10",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all the episodes we know about for this feed from the PodcastIndex ID. Episodes are in reverse chronological order.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=75075&pretty\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=41504,920666&pretty\n  - Includes `persons`: https://api.podcastindex.org/api/1.0/episodes/byfeedid?id=169991&pretty\n"
					},
					"response": []
				},
				{
					"name": "By Feed URL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"byfeedurl"
							],
							"query": [
								{
									"key": "url",
									"value": "https://feeds.theincomparable.com/batmanuniversity",
									"description": "(Required) Podcast feed URL\n"
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "max",
									"value": "10",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all the episodes we know about for this feed from the feed URL. Episodes are in reverse chronological order.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity&pretty\n  - Includes `persons`: https://api.podcastindex.org/api/1.0/episodes/byfeedurl?url=https://engineered.network/pragmatic/feed/index.xml&pretty\n"
					},
					"response": []
				},
				{
					"name": "By iTunes ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/byitunesid?id=1441923632",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"byitunesid"
							],
							"query": [
								{
									"key": "id",
									"value": "1441923632",
									"description": "(Required) The iTunes Feed ID to search for\n"
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "max",
									"value": "10",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns all the episodes we know about for this feed from the iTunes ID. Episodes are in reverse chronological order.\n\nExample: https://api.podcastindex.org/api/1.0/episodes/byitunesid?id=1441923632&pretty\n"
					},
					"response": []
				},
				{
					"name": "By ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/byid?id=16795089",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"byid"
							],
							"query": [
								{
									"key": "id",
									"value": "16795089",
									"description": "(Required) The PodcastIndex episode ID to search for.\n"
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "Get all the metadata for a single episode by passing its id.\n\nExample: https://api.podcastindex.org/api/1.0/episodes/byid?id=16795090&pretty\n"
					},
					"response": []
				},
				{
					"name": "By GUID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/byguid?guid=PC2084&feedid=920666",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"byguid"
							],
							"query": [
								{
									"key": "guid",
									"value": "PC2084",
									"description": "(Required) The guid value for the episode to retrieve.\n\n\n  This value is the value specified in the feed's `<guid>` field.\n"
								},
								{
									"key": "feedid",
									"value": "920666",
									"description": "The PodcastIndex Feed ID\n"
								},
								{
									"key": "feedurl",
									"value": "http://mp3s.nashownotes.com/pc20rss.xml",
									"description": "The Feed URL\n"
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "Get all the metadata for a single episode by passing its guid and the feed id or URL.\n\nThe `feedid` or the `feedurl` is required.\n\nExamples: \n\n  - Search using Podcast Index feed ID: https://api.podcastindex.org/api/1.0/episodes/byguid?guid=PC2084&feedid=920666&pretty\n  - Search using feed URL: https://api.podcastindex.org/api/1.0/episodes/byguid?guid=PC2084&feedurl=http://mp3s.nashownotes.com/pc20rss.xml&pretty\n"
					},
					"response": []
				},
				{
					"name": "Random",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/episodes/random",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"episodes",
								"random"
							],
							"query": [
								{
									"key": "max",
									"value": "2",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "en",
									"description": "Specifying a language code (like \"en\") will return only episodes having that specific language.\n\nYou can specify multiple languages by separating them with commas.\n\nIf you also want to return episodes that have no language given, use the token \"unknown\". (ex. en,es,ja,unknown).\n\nValues are not case sensitive.\n",
									"disabled": true
								},
								{
									"key": "cat",
									"value": "News",
									"description": "Use this argument to specify that you **ONLY** want episodes with these categories in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "notcat",
									"value": "News",
									"description": "Use this argument to specify categories of episodes to **NOT** show in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns a random batch of episodes, in no specific order.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/episodes/random?notcat=News,Religion&lang=en,es&pretty\n  - https://api.podcastindex.org/api/1.0/episodes/random?max=2&pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "recent",
			"item": [
				{
					"name": "Episodes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recent/episodes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recent",
								"episodes"
							],
							"query": [
								{
									"key": "max",
									"value": "7",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "excludeString",
									"value": "religion",
									"description": "Any item containing this string will be discarded from the result set.\n\nThis may, in certain cases, reduce your set size below your `max` value.\n\nMatches against the `title` and URL properties.\n",
									"disabled": true
								},
								{
									"key": "before",
									"value": "1721351091",
									"description": "If you pass a PodcastIndex Episode ID, you will get recent episodes before that ID, allowing you to walk back through the episode history sequentially.\n",
									"disabled": true
								},
								{
									"key": "fulltext",
									"value": "true",
									"description": "If present, return the full text value of any text fields (ex: `description`). If not provided, field value is truncated to 100 words.\n\nParameter shall not have a value\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns the most recent `max` number of episodes globally across the whole index, in reverse chronological order.\n\nExample: https://api.podcastindex.org/api/1.0/recent/episodes?max=7&pretty\n"
					},
					"response": []
				},
				{
					"name": "Feeds",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recent/feeds",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recent",
								"feeds"
							],
							"query": [
								{
									"key": "max",
									"value": "20",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "lang",
									"value": "en",
									"description": "Specifying a language code (like \"en\") will return only episodes having that specific language.\n\nYou can specify multiple languages by separating them with commas.\n\nIf you also want to return episodes that have no language given, use the token \"unknown\". (ex. en,es,ja,unknown).\n\nValues are not case sensitive.\n",
									"disabled": true
								},
								{
									"key": "cat",
									"value": "News",
									"description": "Use this argument to specify that you **ONLY** want episodes with these categories in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "notcat",
									"value": "News",
									"description": "Use this argument to specify categories of episodes to **NOT** show in the results.\n\nSeparate multiple categories with commas.\n\nYou may specify either the Category ID and/or the Category Name.\n\nValues are not case sensitive.\n\nThe `cat` and `notcat` filters can be used together to fine tune a very specific result set.\n\nCategory numbers and names can be found in the [Podcast Namespace documentation](https://github.com/Podcastindex-org/podcast-namespace/blob/main/categories.json)\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns the most recent `max` feeds, in reverse chronological order.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/recent/feeds?pretty\n  - https://api.podcastindex.org/api/1.0/recent/feeds?max=20&cat=102,health&lang=de,ja&pretty\n"
					},
					"response": []
				},
				{
					"name": "New Feeds",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recent/newfeeds",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recent",
								"newfeeds"
							],
							"query": [
								{
									"key": "max",
									"value": "20",
									"description": "Maximum number of results to return.\n",
									"disabled": true
								},
								{
									"key": "since",
									"value": "1612125785",
									"description": "Return items since the specified time. The value can be a unix epoch timestamp or a negative integer that represents a number of seconds prior to right now.\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns every new feed added to the index over the past 24 hours in reverse chronological order.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/recent/newfeeds?pretty\n  - https://api.podcastindex.org/api/1.0/recent/newfeeds?pretty&since=1613805000\n"
					},
					"response": []
				},
				{
					"name": "Soundbites",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/recent/soundbites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recent",
								"soundbites"
							],
							"query": [
								{
									"key": "max",
									"value": "20",
									"description": "Maximum number of soundbites to return.\n",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns the most recent `max` soundbites that the index has discovered.\n\nA soundbite consists of an enclosure url, a start time and a duration. It is documented in the [podcast namespace](https://github.com/Podcastindex-org/podcast-namespace/blob/main/docs/1.0.md#soundbite).\n\nExample: https://api.podcastindex.org/api/1.0/recent/soundbites?pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "value",
			"item": [
				{
					"name": "By Feed ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/value/byfeedid?id=920666",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"value",
								"byfeedid"
							],
							"query": [
								{
									"key": "id",
									"value": "920666",
									"description": "(Required) The PodcastIndex Feed ID to search for.\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "This call returns the information for supporting the podcast via one of the \"Value for Value\" methods from the PodcastIndex ID.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/value/byfeedid?id=920666&pretty\n  - https://api.podcastindex.org/api/1.0/value/byfeedid?id=779873&pretty\n"
					},
					"response": []
				},
				{
					"name": "By Feed URL",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/value/byfeedurl?url=https://mp3s.nashownotes.com/pc20rss.xml&pretty=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"value",
								"byfeedurl"
							],
							"query": [
								{
									"key": "url",
									"value": "https://mp3s.nashownotes.com/pc20rss.xml",
									"description": "(Required) Podcast feed URL\n"
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n"
								}
							]
						},
						"description": "This call returns the information for supporting the podcast via one of the \"Value for Value\" methods from feed URL.\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/value/byfeedurl?url=https://mp3s.nashownotes.com/pc20rss.xml&pretty\n  - https://api.podcastindex.org/api/1.0/value/byfeedurl?url=https://lespoesiesdheloise.fr/@heloise/feed.xml&pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "stats",
			"item": [
				{
					"name": "Current",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/stats/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stats",
								"current"
							],
							"query": [
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "Return the most recent index statistics.\n\nExample: https://api.podcastindex.org/api/1.0/stats/current?pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "List",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/categories/list",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"categories",
								"list"
							],
							"query": [
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "Return all the possible categories supported by the index.\n\nExample: https://api.podcastindex.org/api/1.0/categories/list?pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "hub",
			"item": [
				{
					"name": "Pub Notify",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/hub/pubnotify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"hub",
								"pubnotify"
							],
							"query": [
								{
									"key": "id",
									"value": "75075",
									"description": "The PodcastIndex Feed ID\n\nThe `id` or the `url` is required.",
									"disabled": true
								},
								{
									"key": "url",
									"value": "https://feeds.theincomparable.com/batmanuniversity",
									"description": "The Podcast Feed URL\n\nThe `id` or the `url` is required.",
									"disabled": true
								},
								{
									"key": "pretty",
									"value": "true",
									"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
									"disabled": true
								}
							]
						},
						"description": "Notify the index that a feed has changed\n\nExamples:\n\n  - https://api.podcastindex.org/api/1.0/hub/pubnotify?id=920666&pretty\n  - https://api.podcastindex.org/api/1.0/hub/pubnotify?id=920666&update&pretty\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "add",
			"item": [
				{
					"name": "byfeedurl",
					"item": [
						{
							"name": "By Feed URL",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add",
										"byfeedurl"
									],
									"query": [
										{
											"key": "url",
											"value": "https://feeds.theincomparable.com/batmanuniversity",
											"description": "(Required) Podcast feed URL\n"
										},
										{
											"key": "chash",
											"value": "ad651c60eaaf3344595c0dd0bd787993",
											"description": "(Required) The md5 hash of the following feed items in hex format. If known, allows for easier duplicate checking.\n\n  - `title`\n  - `link`\n  - `feedLanguage`\n  - `generator`\n  - `author`\n  - `ownerName`\n  - `ownerEmail` (note: not exposed via the API)\n\nPseudo-code:\n\n      chash = md5(title+link+feedLanguage+generator+author+ownerName+ownerEmail)\n",
											"disabled": true
										},
										{
											"key": "itunesid",
											"value": "1441923632",
											"description": "If this parameter is given, and the existing feed has no associated iTunes ID, it will be associated with this ID. If an existing iTunes ID is already associated with this feed it will **NOT** be changed.\n",
											"disabled": true
										},
										{
											"key": "pretty",
											"value": "true",
											"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
											"disabled": true
										}
									]
								},
								"description": "This call adds a podcast to the index using its feed url. If a feed already exists, you will get its existing Feed ID returned.\n\n**NOTE**: this endpoint requires an API Key with the **write** permission.\n\nExample: https://api.podcastindex.org/api/1.0/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity&pretty\n"
							},
							"response": []
						},
						{
							"name": "By Feed URL",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add",
										"byfeedurl"
									],
									"query": [
										{
											"key": "url",
											"value": "https://feeds.theincomparable.com/batmanuniversity",
											"description": "(Required) Podcast feed URL\n"
										},
										{
											"key": "itunesid",
											"value": "1441923632",
											"description": "If this parameter is given, and the existing feed has no associated iTunes ID, it will be associated with this ID. If an existing iTunes ID is already associated with this feed it will **NOT** be changed.\n",
											"disabled": true
										},
										{
											"key": "pretty",
											"value": "true",
											"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
											"disabled": true
										}
									]
								},
								"description": "This call adds a podcast to the index using its feed url. If a feed already exists, you will get its existing Feed ID returned.\n\n**NOTE**: this endpoint requires an API Key with the **write** permission.\n\nExample: https://api.podcastindex.org/api/1.0/add/byfeedurl?url=https://feeds.theincomparable.com/batmanuniversity&pretty\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "byitunesid",
					"item": [
						{
							"name": "By iTunes ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/add/byitunesid?id=1441923632",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add",
										"byitunesid"
									],
									"query": [
										{
											"key": "id",
											"value": "1441923632",
											"description": "The iTunes ID to add\n"
										},
										{
											"key": "pretty",
											"value": "true",
											"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
											"disabled": true
										}
									]
								},
								"description": "This call adds a podcast to the index using its iTunes ID. If a feed already exists, it will be noted in the response.\n\n**NOTE**: this endpoint requires an API Key with the **write** permission.\n\nExample: https://api.podcastindex.org/api/1.0/add/byitunesid?id=1441923632&pretty\n"
							},
							"response": []
						},
						{
							"name": "By iTunes ID",
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/add/byitunesid?id=1441923632",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"add",
										"byitunesid"
									],
									"query": [
										{
											"key": "id",
											"value": "1441923632",
											"description": "The iTunes ID to add\n"
										},
										{
											"key": "pretty",
											"value": "true",
											"description": "If present, makes the output “pretty” to help with debugging.\n\nParameter shall not have a value\n",
											"disabled": true
										}
									]
								},
								"description": "This call adds a podcast to the index using its iTunes ID. If a feed already exists, it will be noted in the response.\n\n**NOTE**: this endpoint requires an API Key with the **write** permission.\n\nExample: https://api.podcastindex.org/api/1.0/add/byitunesid?id=1441923632&pretty\n"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const authKey = pm.variables.get(\"AuthKey\");",
					"const secretKey = pm.variables.get(\"SecretKey\");",
					"const userAgent = pm.variables.get(\"UserAgent\");",
					"",
					"const apiHeaderTime = new Date().getTime() / 1000;",
					"const hash = CryptoJS.SHA1(authKey + secretKey + apiHeaderTime).toString(CryptoJS.enc.Hex);",
					"",
					"pm.request.headers.add({ key: 'User-Agent', value: 'SuperPodcastPlayer/1.3' });",
					"pm.request.headers.add({ key: 'X-Auth-Key', value: authKey });",
					"pm.request.headers.add({ key: 'X-Auth-Date', value: apiHeaderTime });",
					"pm.request.headers.add({ key: 'Authorization', value: hash });",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.podcastindex.org/api/1.0"
		}
	]
}
